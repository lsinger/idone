#!/usr/bin/env ruby

USERNAME = ENV.fetch('IDONETHIS_USERNAME')
TOKEN = ENV.fetch('IDONETHIS_TOKEN')
TEAM = ENV.fetch('IDONETHIS_TEAM')

API_ROOT = 'https://idonethis.com/api/v0.1'

OK = '✔︎'
NOOK = '╳'

if [USERNAME, TOKEN, TEAM].any?(&:empty?)
  puts help
  abort
end

require 'json'
require 'net/http'
require 'pp'

require 'optparse'

def help
  <<-EOF.gsub(/^.*#(\s)?/, '')
     # Quick and dirty script for idonethis.com
     #
     # Requires follwing env variables:
     # - IDONETHIS_TEAM - team shortname (found in url)
     # - IDONETHIS_TOKEN - your idonethis api token
     # - IDONETHIS_USERNAME - your idonethis username
     #
     # Usage:
     # idone --text="[ ] get this done!"
     # idone --text="got it done" --id=2325
     # idone -m
     #
     # Options:
EOF
end

def req(method: Net::HTTP::Get, path: '/dones/', params: {}, data: {})
  param_str = ['?', URI.encode_www_form(params)].join ''
  uri = URI.parse(API_ROOT + path + param_str)

  request = method.new uri
  request['Content-Type'] = 'application/json'
  request['Authorization'] = "Token #{TOKEN}"

  request.set_form_data data unless data.empty?

  resp = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    http.request(request)
  end

  JSON.parse(resp.body)
end

def create_done(done_text)
  res = req(method: Net::HTTP::Post, data: { raw_text: done_text, team: TEAM })
  show_create(res)
end

def update_done(id, done_text)
  team_url = URI.parse(API_ROOT + '/teams/' + TEAM + '/').to_s
  res = req(method: Net::HTTP::Put,
            data: { raw_text: done_text, team: team_url },
            path:  "/dones/#{id}/")

  puts res
end

def show_list(response)
  response['results'].map do |res|
    show_done(res)
  end
end

DONE_TEMPLATE = <<-EOF
%{sigil} | %{id} | %{owner} | %{text}
EOF

def show_done(done)
  sigil = done['goal_completed'] ? OK : NOOK
  puts DONE_TEMPLATE % { id: done['id'],
                         owner: done['owner'],
                         sigil: sigil,
                         text: done['markedup_text'] }
end

def show_create(response)
  if response['ok']
    puts "#{OK} Ok"
  else
    puts "#{NOOK} Failed"
    pp response
  end
end

# ----------------------------------------------------

options = { only_user: false }

OptionParser.new do |opts|
  opts.banner = help
  opts.on('-tTEXT', '--text=TEXT', 'New to-be-done') do |text|
    options[:text] = text
  end

  opts.on('-m', '--my', 'Show only my dones') do
    options[:only_user] = true
  end

  opts.on('-uID', '--update=ID', 'Update existing done') do |id|
    options[:id] = id
  end
end.parse!

done_text = options[:text]
if done_text.to_s.size > 0
  id = options[:id]
  if id
    update_done(id, done_text)
  else # created
    create_done(done_text)
  end
end

list_opts = {}
list_opts[:owner] = USERNAME if options[:only_user]

puts '> Yesterday'
show_list req params: { done_date: 'yesterday' }.merge(list_opts)
puts

puts '> Today'
show_list req params: { done_date: 'today' }.merge(list_opts)
