#!/usr/bin/env ruby

require 'json'
require 'net/http'
require 'pp'

require 'optparse'

HELP = <<-EOF
Quick and dirty script for idonethis.com

Requires follwing env variables:
   - IDONETHIS_TEAM - team shortname (found in url)
   - IDONETHIS_TOKEN - your idonethis api token
   - IDONETHIS_USERNAME - your idonethis username

Usage:
   idone --text="[ ] get this done!" - create a new goal
   idone -t "got this done"
   idone --text="got it done" --id=2325 - update a done
   idone --all # show all dones from team
   idone -c ID - complete a done

Options:
EOF

USERNAME = ENV.fetch('IDONETHIS_USERNAME') do
  puts HELP
  abort 'IDONETHIS_USERNAME not set '
end

TOKEN = ENV.fetch('IDONETHIS_TOKEN') do
  puts HELP
  abort 'IDONETHIS_TOKEN not set'
end

TEAM = ENV.fetch('IDONETHIS_TEAM') do
  puts HELP
  abort 'IDONETHIS_TEAM not set'
end

API_ROOT = 'https://idonethis.com/api/v0.1'

OK = '✓'
GOAL = '☐'
NOOK = '✗'

def req(method: Net::HTTP::Get, path: '/dones/', params: {}, data: {})
  param_str = ['?', URI.encode_www_form(params)].join ''
  uri = URI.parse(API_ROOT + path + param_str)

  request = method.new uri
  request['Content-Type'] = 'application/json'
  request['Authorization'] = "Token #{TOKEN}"

  request.set_form_data data unless data.empty?

  resp = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    http.request(request)
  end

  JSON.parse(resp.body)
end

def create_done(done_text)
  res = req(method: Net::HTTP::Post, data: { raw_text: done_text, team: TEAM })
  show_create(res)
end

def update_done(id, done_text)
  team_url = URI.parse(API_ROOT + '/teams/' + TEAM + '/').to_s
  res = req(method: Net::HTTP::Put,
            data: { raw_text: done_text, team: team_url },
            path:  "/dones/#{id}/")

  puts res
end

def complete_done(id)
  res = req(method: Net::HTTP::Get,
            path: "/dones/#{id}/")

  text = res['result']['raw_text']

  update_done(id, text.sub(/\[.*\]/, ''))
end

def show_list(response)
  response['results'].map do |res|
    show_done(res)
  end
end

DONE_TEMPLATE = <<-EOF
%{sigil} | %{id} | %{owner} | %{text}
EOF

def show_done(done)
  sigil = done['goal_completed'] ? OK : GOAL
  puts DONE_TEMPLATE % { id: done['id'],
                         owner: done['owner'],
                         sigil: sigil,
                         text: done['raw_text'] }
end

def show_create(response)
  if response['ok']
    puts "#{OK} Ok"
  else
    puts "#{NOOK} Failed"
    pp response
  end
end

def parse_options
  options = { only_current_user: true }

  OptionParser.new do |opts|
    opts.banner = HELP
    opts.on('-tTEXT', '--text=TEXT', 'New to-be-done') do |text|
      options[:text] = text
    end

    opts.on('-a', '--all', 'Show dones from whole team') do
      options[:only_current_user] = false
    end

    opts.on('-y', '--yesterday', 'Show yesterday\'s dones') do
      options[:yesterday] = true
    end

    opts.on('-uID', '--update=ID', 'Update existing done') do |id|
      options[:id] = id
    end

    opts.on('-cID', '--complete=ID', 'Complete goal') do |id|
      options[:text] = false
      options[:id] = false
      options[:complete_id] = id
    end
  end.parse!

  options
end

# ----------------------------------------------------

options = parse_options

if options[:complete_id]
  complete_done(options[:complete_id])
else

  done_text = options[:text]
  if done_text.to_s.size > 0
    id = options[:id]
    if id
      update_done(id, done_text)
    else # created
      create_done(done_text)
    end
  end
end

list_opts = {}
list_opts[:owner] = USERNAME if options[:only_current_user]

if options[:yesterday]
  puts '> Yesterday'
  show_list req params: { done_date: 'yesterday' }.merge(list_opts)
  puts
end

puts '> Today'
show_list req params: { done_date: 'today' }.merge(list_opts)
